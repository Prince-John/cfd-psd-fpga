#!/usr/bin/python3

#
# Script to automate dac configuration validation by parsing the event log csv that was
# generated by MDO3024 scope connected to trenz 705 data lines. 
# 

# Need the serial library

import serial

# Import the time library

import time
import os


NUL = 0
STX = 2
ETX = 3

ACK = b'\x06'
NAK = b'\x15'


# -------------------------------------------------------------------
# Wait for ACK
# -------------------------------------------------------------------

def waitACK() :
   #print("Waiting for a ACK or NAK...", flush = True)
   while True:
      if (ser.in_waiting) :
         byte = ser.read(1)
         if (byte == ACK) :
          #  print("Received ACK ...")
            break
         if (byte == NAK) :
          #  print("Received NAK ...")   
            break
         
# -------------------------------------------------------------------
# Send STX to enter configuration mode
# -------------------------------------------------------------------

def sendSTX() :
   print("")
   print("Sending STX to enter configuration mode.", flush = True)
   buff = [STX, NUL]
   byte_array = bytearray(buff)
   ser.write(byte_array)
   waitACK() 
       
# -------------------------------------------------------------------
# Send ETX to enter configuration mode
# -------------------------------------------------------------------

def sendETX() :
   print("")
   print("Sending ETX to exit configuration mode.", flush = True)
   buff = [ETX, NUL]
   byte_array = bytearray(buff)
   ser.write(byte_array)
   waitACK()

# -------------------------------------------------------------------
# Send configuration command
# -------------------------------------------------------------------

def sendCMD(message, cmdStr, dry_run = False) :

   if dry_run:
   	print("dry_run is True, nothing was sent!")
   	return
   	 
   byte_array = cmdStr.encode(encoding="ascii") 
   ser.write(byte_array)
   waitACK()


# -------------------------------------------------------------------
# Generate DAC config word
# -------------------------------------------------------------------
def generate_dac_word(channel: int, voltage: float): 

	max_voltage = 5.0
	min_voltage = 0.0

	if voltage < min_voltage or voltage > max_voltage:
		raise ValueError("DAC voltage must be between 5.0 - 0.0V")
		return

	if channel < 1 or channel > 8:
		raise ValueError("DAC channel must be between 1 - 8")
		return	
		
	k = (int)((voltage/5.0) * 1024)
	
	#print(f'k is {k}, vol/5.0 {voltage/5.0}')
	data_word = (channel << 12) | (k << 2) | 0x1 # making the dont care bits 0b01. 

	return data_word


if __name__ == '__main__':

	print("Starting DAC automated testing", flush = True)

	print('device env set', os.environ.get('PSD_UART_0'))
	ser = serial.Serial('/dev/ttyUSB0')
	ser.baudrate = 3000000
	ser.timeout = 0
	ser.flushInput() 
	ser.flushOutput()
	time.sleep(1) 

	# Enter config mode

	sendSTX()
	
	ready = input("Set scope to one shot trigger with capture length set to at least 200ms and 5 MS/s resolution.\ny to continue")
	
	if ready == 'y':
		pass
	 
	# Automate write to all channels and all 10 voltages for the dac
	sent_data = []
	for channel in range(1, 9):

		for k in range(0,10):
			
			voltage = ((2**k)/1024)*5.0
			
			data = generate_dac_word(channel, voltage)
			sent_data.append(data)
			command = f"DAC:{data:04X}\0"
			message = f"testing DAC command with command string: {command}, data word is : {data:016b}" 
			sendCMD(message, command, dry_run = False)



	# Exit from config mode

	sendETX()
	
	ready = input("Copy over the event table to ./event_tables/dac.csv\ny to continue")
	
	if ready == 'y':
		pass
	print("Script done #TODO implement the validation")
	print(sent_data)

