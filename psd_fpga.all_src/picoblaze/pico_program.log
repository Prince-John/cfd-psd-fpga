Open PicoBlaze Assembler log for program "pico_program.psm"
Generated by opbasm v1.3.10
  Assembled on 2024-09-28T12:36:30
  Target architecture: PicoBlaze-6

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 4096
  Occupied memory locations: 99
  Memory locations available: 3997
  Scratchpad size: 256


Assembly listing
----------------
                                        ;
000                                     ; Quick little test program for our picoblaze
000                                     ; For starters just blink led connected to bit 0
000                                     ; of output port #0
                                        ;

000                                     ; Output ports

000                                     constant MISC, 00

000                                     constant ADC_CTL, 01

000                                     constant DAT_TAG, 02

000                                     constant TDC_DAT, 03

000                                     constant TDC_CTL, 04

000                                     constant OP5, 05

000                                     constant OP6, 06

000                                     constant OP7, 07

                                        ;
000                                     ; A write to "VALID" port asserts FIFO tvalid signal
000                                     ; A write to "LAST" port asserts FIFO tvalid and tlast signals
000                                     ; The value we write to port makes NO DIFFERENCE

000                                     constant VALID, fe

000                                     constant LAST, ff


000                                     ; Input ports

000                                     constant IP0, 00

000                                     constant IP1, 01

000                                     constant IP2, 02

000                                     constant IP3, 03


000                                     ; For our LEDs

000                                     constant LED_ON, 01

000                                     constant LED_OFF, 00

                                        ;
000                                     ; Picoblaze has 16 general purpose registers
000                                     ; Give more desciptive names to some of our registers
                                        ;
000                                     namereg s0, op                 ; Output port register
000                                     namereg s1, ip                 ; Input port register
000                                     namereg s2, scr0               ; Scratchpad register 0
000                                     namereg s3, scr1               ; Scratchpad register 1
000                                     namereg s4, scr2               ; Scratchpad register 2
000                                     namereg s5, cnt                ; Used in counters
000                                     namereg s6, dreg               ; Used in delay_1us routine
000                                     namereg s7, adc_reg            ; Used by adc routine
000                                     namereg s8, adc_mask           ; Used by adc routine
000                                     namereg s9, pkt_size           ; Size of packet
000                                     namereg sa, status             ; Global variable with status info
                                        ;
000                                     ; We’ll make sF special and use it for the stack pointer!
000                                     ; Start stack at end of 64-byte scratchpad (using macro!)
000                                     ; Stack grows down

000                                     namereg sf, SP
                                        ;
000                                     ; We will use macros but only sparingly!
000                                     ; A 16-bit register with scr1 (upper) and scr0 (lower)



000                                     ;********************************************
000                                     ; Our vector to main is stored at address 000
000                                     ;********************************************
                                        ;
000                                     address 000

000  2204D ╭──────⤙             origin: jump main
           │
001        │                            ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
001        │                            ; Subroutine Name: init
001        │                            ; Initialize the stack pointer, SP
001        │                            ; Set all output port bits low
001        │                            ; Uses scr1 BUT restores it!!!!
001        │                            ; Demos out to work with stack!
001        │                            ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           │
001        │                      init:
           │
001        │                            ; Initialize the stack pointer
           │
001  01F3F │╭─────▶                     load SP, 3f
           ││
002        ││                           ;  Push scr1 onto the stack
           ││
002  2E3F0 ││                           store scr1, (SP)               ; Push
003  19F01 ││                           sub SP, 01
           ││
           ││
004        ││                           ; Clear the 8 output port registers
           ││
004  01300 ││                           load scr1, 00
005  2D300 ││                           output scr1, MISC
006  2D301 ││                           output scr1, ADC_CTL
007  2D302 ││                           output scr1, DAT_TAG
008  2D303 ││                           output scr1, TDC_DAT
009  2D304 ││                           output scr1, TDC_CTL
00A  2D305 ││                           output scr1, OP5
00B  2D306 ││                           output scr1, OP6
00C  2D307 ││                           output scr1, OP7
           ││
00D        ││                           ; Restore scr1 register
           ││
00D  11F01 ││                           add SP, 01                     ; Pop
00E  0A3F0 ││                           fetch scr1, (SP)
           ││
00F  25000 ││                           return
           ││
010        ││                           ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
010        ││                           ; Subroutine Name: dly_100ns
           ││                           ;
010        ││                           ; Delay of 100 ns
           ││                           ;
010        ││                           ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           ││
010        ││                dly_100ns:
010  00EE0 ││                           load se, se                    ; NOP
011  00EE0 ││                           load se, se                    ; NOP
012  00EE0 ││                           load se, se                    ; NOP
013  25000 ││                           return
           ││
014        ││                           ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
014        ││                           ; Subroutine Name: dly_us
           ││                           ;
014        ││                           ; Delay of 1 usec
014        ││                           ; Delay is [(4 * dreg) + 6] / Fclk
014        ││                           ; constant = (clock rate - 6) / 4 where clock rate is in MHz
           ││                           ;
014        ││                           ; Routine uses dreg and does not restore it
           ││                           ;
014        ││                           ; 24 (i.e $18) assumes a 100 MHz clock
014        ││                           ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           ││
014        ││                   dly_us:
014  01618 ││╭┬─┬─▶                     load dreg, 24'd
015  19601 ││││ │╭▶           .wait_us: sub dreg, 01
016  36015 ││││ │╰⤙                     jump NZ, .wait_us
017  25000 ││││ │                       return
           ││││ │
018        ││││ │                       ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
018        ││││ │                       ; Subroutine Name: dly_100ms
           ││││ │                       ;
018        ││││ │                       ; Delay for "about" 100ms by repeatly calling
018        ││││ │                       ; delay_1us subroutine
018        ││││ │                       ; Note: 100,000 is $0186A0
           ││││ │                       ;
018        ││││ │                       ; Uses scr0, scr1, scr2 and does not restore them
018        ││││ │                       ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           ││││ │
018        ││││ │            dly_100ms:
018  01401 ││││╭──▶                     load scr2, 01
019  01386 ││││││                       load scr1, 86
01A  012A0 ││││││                       load scr0, A0
01B  20014 │││││╰┬⤙              .loop: call dly_us
01C  19201 │││││ │                      sub scr0, 01
01D  1B300 │││││ │                      subcy scr1, 00
01E  1B400 │││││ │                      subcy scr2, 00
01F  3E01B │││││ ╰⤙                     jump NC, .loop
020  25000 │││││                        return
           │││││
021        │││││                        ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
021        │││││                        ; Subroutine Name: dly_sec
021        │││││                        ; Delays for about 1 second
021        │││││                        ; Uses cnt but saves it on stack and then
021        │││││                        ; pops it off the stack before returning
021        │││││                        ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           │││││
021        │││││               dly_sec:
021  2E5F0 │││││                        store cnt, (SP)                ; Push
022  19F01 │││││                        sub SP, 01
           │││││
023  0150A │││││                        load cnt, 10'd
024  20018 ││││╰─┬⤙              .loop: call dly_100ms
025  19501 ││││  │                      sub cnt, 01
026  36024 ││││  ╰⤙                     jump NZ, .loop
027  11F01 ││││                         add SP, 01                     ; Pop
028  0A5F0 ││││                         fetch cnt, (SP)
           ││││
029  25000 ││││                         return
           ││││
02A        ││││                         ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
02A        ││││                         ; Subroutine Name: adc_convert
           ││││                         ;
02A        ││││                         ; Output port 1 (ADC_PORT) constrols the ADC
02A        ││││                         ; adc_reg bit assignments
           ││││                         ;
02A        ││││                         ; 0		ADC sclk for PSD 0
02A        ││││                         ; 1		ADC sclk for PSD 1
02A        ││││                         ; 2		ADC conv for PSD 0
02A        ││││                         ; 3		ADC conv for PSD 1
02A        ││││                         ; 4		adc_mux_sel bit 0
02A        ││││                         ; 5		adc_mux_sel bit 1
02A        ││││                         ; 6		adc_mux_sel bit 2
02A        ││││                         ; 7		adc_reg_reset
           ││││                         ;
02A        ││││                         ; For time being only control the PSD 0 ADC bank
           ││││                         ;
02A        ││││                         ; Uses the cnt register but restores it
02A        ││││                         ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           ││││
02A        ││││               adc_conv:
           ││││
02A        ││││                         ; Save cnt register
           ││││
02A  2E5F0 ││││╭──▶                     store cnt, (SP)                ; Push
02B  19F01 │││││                        sub SP, 01
           │││││
           │││││
02C        │││││                        ; Reset the ADC shift registers
           │││││
02C  01700 │││││                        load adc_reg, 00
02D  01801 │││││                        load adc_mask, 01
02E  05780 │││││                        or adc_reg, 80                 ; Set bit 7
02F  2D701 │││││                        output adc_reg, ADC_CTL
030  0377F │││││                        and adc_reg, 7f                ; Clear bit 7
031  2D701 │││││                        output adc_reg, ADC_CTL
           │││││
032        │││││                        ; Bring conv high for about 2 us
           │││││
032  05704 │││││                        or adc_reg, 04                 ; Set bit 2
033  2D701 │││││                        output adc_reg, ADC_CTL
034  20014 │││╰───⤙                     call dly_us
035  20014 ││╰────⤙                     call dly_us
           ││  │
036        ││  │                        ; Bring conv low
           ││  │
036  037FB ││  │                        and adc_reg, fb                ; Clear bit 2
037  2D701 ││  │                        output adc_reg, ADC_CTL
           ││  │
038        ││  │                        ; Apply 16 clock pulses (takes about 2 usec)
           ││  │
038  01510 ││  │                        load cnt, 16'd
039  06780 ││  │ ╭▶          .clk_loop: xor adc_reg, adc_mask
03A  2D701 ││  │ │                      output adc_reg, ADC_CTL
03B  06780 ││  │ │                      xor adc_reg, adc_mask
03C  00EE0 ││  │ │                      load se, se                    ; NOP
03D  00EE0 ││  │ │                      load se, se                    ; NOP
03E  2D701 ││  │ │                      output adc_reg, ADC_CTL
03F  19501 ││  │ │                      sub cnt, 01
040  36039 ││  │ ╰⤙                     jump NZ, .clk_loop
           ││  │
041        ││  │                        ; Either assert just "tvalid" or
041        ││  │                        ; assert "tvalid" and "tlast" to send to FIFO.
041        ││  │                        ; Check bit 0 of status register to see which
041        ││  │                        ; port we need to write to!
041        ││  │                        ; What we write to VALID and LAST ports
041        ││  │                        ; makes no difference
           ││  │
041  0DA01 ││  │                        test status, 01
042  32045 ││  │╭─⤙                     jump Z, .loc0
           ││  ││
043        ││  ││                       ; Last write in packet so assert "tlast" and "tvalid"
           ││  ││
043  2D2FF ││  ││                       output scr0, LAST
044  22046 ││  ││╭⤙                     jump .loc1
           ││  │││
045        ││  │││                      ; Not last value in packet so assert just "tvalid"
           ││  │││
045  2D2FE ││  │╰─▶              .loc0: output scr0, VALID
           ││  │ │
046        ││  │ │                      ; Restore cnt register
           ││  │ │
046  11F01 ││  │ ╰▶              .loc1: add SP, 01                     ; Pop
047  0A5F0 ││  │                        fetch cnt, (SP)
           ││  │
           ││  │
048  25000 ││  │                        return
           ││  │
049        ││  │                        ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
049        ││  │                        ; Name: get_packet
049        ││  │                        ; Routine to get a packet
049        ││  │                        ; Packet size is specified in psize register
049        ││  │                        ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           ││  │
049        ││  │            get_packet:
049  2002A ││ ╭╰┬┬⤙              .loop: call adc_conv
04A  19901 ││ │ ││                      sub pkt_size, 01
04B  36049 ││ │ │╰⤙                     jump NZ, .loop
04C  25000 ││ │ │                       return
           ││ │ │
04D        ││ │ │                       ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
04D        ││ │ │                       ; ******* MAIN ROUTINE *********
04D        ││ │ │                       ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ││ │ │
04D        ││ │ │                 main:
04D  20001 ╰┴─────▶                     call init
              │ │
04E  01001    │╭──▶         .main_loop: load op, LED_ON
04F  2D000    │││                       output op, MISC
050  01303    │││                       load scr1, 03                  ; 1000
051  012E8    │││                       load scr0, e8
052  01964    │││╭▶             .loop0: load pkt_size, 100'd
053  20049    ││╰─⤙                     call get_packet
054  112FF    ││ │                      add scr0, ff                   ; -1
055  133FF    ││ │                      addcy scr1, ff
056  36052    ││ ╰⤙                     jump NZ, .loop0
057  01000    ││                        load op, LED_OFF
058  2D000    ││                        output op, MISC
059  01303    ││                        load scr1, 03                  ; 1000
05A  012E8    ││                        load scr0, e8
05B  01996    ││ ╭▶             .loop1: load pkt_size, 150'd
05C  20049    ╰───⤙                     call get_packet
05D  112FF     │ │                      add scr0, ff                   ; -1
05E  133FF     │ │                      addcy scr1, ff
05F  3605B     │ ╰⤙                     jump NZ, .loop1
060  2204E     ╰──⤙                     jump .main_loop

380                                     ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
380                                     ; Interrupt service routine
380                                     ; Currently not using interrupts so just return
                                        ;
380                                     ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

380                                     address 380

380                             my_isr:
380  29000       ╭▶                     returni disable
                 │                      ;
3FF              │                      ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
3FF              │                      ; Interrupt vector is stored at location $3FF
3FF              │                      ; We will jump to our ISR routine
3FF              │                      ; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 │
3FF              │                      address 3FF
3FF  22380       ╰⤙                     jump my_isr



All unused memory locations contain zero (equivalent to "LOAD s0, s0")


PSM files that have been assembled
----------------------------------
    /home/gle/VIVADO_FPGA/Cmod-A7-Projects/psd_fpga/psd_fpga.all_src/picoblaze/pico_program.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file 
 ----------------      -----  --------------- 
    ADC_CTL            01     pico_program.psm
    BEL                07
    BS                 08
    CR                 0D
    DAT_TAG            02     pico_program.psm
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
 *  IP0                00     pico_program.psm
 *  IP1                01     pico_program.psm
 *  IP2                02     pico_program.psm
 *  IP3                03     pico_program.psm
    LAST               ff     pico_program.psm
    LED_OFF            00     pico_program.psm
    LED_ON             01     pico_program.psm
    LF                 0A
    MISC               00     pico_program.psm
    NUL                00
    OP5                05     pico_program.psm
    OP6                06     pico_program.psm
    OP7                07     pico_program.psm
    ST                 9C
    TDC_CTL            04     pico_program.psm
    TDC_DAT            03     pico_program.psm
    VALID              fe     pico_program.psm
    VT                 0B
    datestamp_day      1C
    datestamp_month    09
    datestamp_year     18
    timestamp_hours    0C
    timestamp_minutes  24
    timestamp_seconds  1E

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.10"
    datestamp$       "28 Sep 2024"
    timestamp$       "12:36:30"


List of line labels
-------------------
    Label              Addr  Source PSM file 
 --------              ----  --------------- 
    adc_conv           02A   pico_program.psm
    adc_conv.clk_loop  039   pico_program.psm
    adc_conv.loc0      045   pico_program.psm
    adc_conv.loc1      046   pico_program.psm
    dly_100ms          018   pico_program.psm
    dly_100ms.loop     01B   pico_program.psm
 *  dly_100ns          010   pico_program.psm
 *  dly_sec            021   pico_program.psm
    dly_sec.loop       024   pico_program.psm
    dly_us             014   pico_program.psm
    dly_us.wait_us     015   pico_program.psm
    get_packet         049   pico_program.psm
    get_packet.loop    049   pico_program.psm
    init               001   pico_program.psm
    main               04D   pico_program.psm
    main.loop0         052   pico_program.psm
    main.loop1         05B   pico_program.psm
    main.main_loop     04E   pico_program.psm
    my_isr             380   pico_program.psm
 *  origin             000   pico_program.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          5
   ADDCY        2
   AND          2
   CALL         8
   CALL@        -
   COMPARE      -
   COMPARECY    -
   DISABLE      -
   ENABLE       -
   FETCH        3
   HWBUILD      -
   INPUT        -
   JUMP         12
   JUMP@        -
   LOAD         23
   LOAD&RETURN  -
   OR           2
   OUTPUT       18
   OUTPUTK      -
   REGBANK      -
   RETURN       7
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STAR         -
   STORE        3
   SUB          8
   SUBCY        2
   TEST         1
   TESTCY       -
   XOR          2
