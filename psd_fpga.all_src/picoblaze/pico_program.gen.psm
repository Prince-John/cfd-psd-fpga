;
; Test program for our picoblaze
; For starters just blink led connected to bit 0
; of output port #0
;
; Keep adding until is does everything we need!
;
; 31-Oct-2024
;
; Let’s replace the adc test program with our
; actual nuclear program
; 31-Jan-2025
; Initially make it essentially just do the adc_test

; ********************************************
; Output ports (we have 8 real output ports)
; There are also two pseudo ports used to
; generate FIFO tvalid and tlast signals
; ********************************************

		constant LED_PORT, 00 

; --------------------------------
; PORT 0 (LED stuff)
; -------------------------------
; 0		LED0
; 1		LED1 (also the busy bit!)

		constant ADC_CTL_PORT, 01 

; --------------------------------
; PORT 1 (ADC control)
; --------------------------------
; 0		ADC sclk for PSD 0
; 1		ADC sclk for PSD 1
; 2		ADC conv for PSD 0
; 3		ADC conv for PSD 1
; 4		adc_mux_sel bit 0
; 5		adc_mux_sel bit 1
; 6		adc_mux_sel bit 2
; 7		adc_reg_reset

		constant DATA_TAG_PORT, 02 

; --------------------------------
; PORT 2 (Data identifier or tag)
; --------------------------------
; 0		psd addr bit 0
; 1		psd addr bit 1
; 2		psd addr bit 2
; 3		psd addr bit 3 n(0 = PSD 0, 1 = PSD 1)
; 4		bit 0 of sc
; 5		bit 1 of sc
; 6		bit 0 of type
; 7		bit 1 of type

; type = 00 ---> ADC data
; type = 01 ---> Board id
; type = 10 ---> TDC data (lower 24 bits)
; type = 11 ---> TDC data (upper 24 bits)

; sc = 00 -----> integrator A
; sc = 01 -----> integrator B
; sc = 10 -----> integrator C
; sc = 11 -----> time

		constant TDC_DATA_PORT, 03 

; --------------------------------
; PORT 3 (TDC byte)
; --------------------------------
; 0		d0
; 1		d1
; 2		d2
; 3		d3
; 4		d4
; 5		d5
; 6		d6
; 7		d7

		constant TDC_CTL_PORT, 04 

; --------------------------------
; PORT 4 (TDC register control)
; --------------------------------
; 0		tdc_reg_ld_0
; 1		tdc_reg_ld_1
; 2		tdc_reg_ld_2
; 3		tdc_reg_rst
; 4		tdc_reg_shift
; 5		tdc_reg_sclk
; 6		tdc_csb
; 7		tdc_enable

		constant PSD0_OPORT, 05 

; --------------------------------
; PORT 5 (Outputs going to psd chip 0 )
; --------------------------------
; 0		psd0_addr_in_0
; 1		psd0_addr_in_1
; 2		psd0_addr_in_2
; 3		psd0_acq_clk
; 4		psd0_sc0
; 5		psd0_sc1
; 6		psd0_token_in
; 7 	psd0_sel_ext_addr

		constant PSD1_OPORT, 06 

; --------------------------------
; PORT 6 (Outputs going to psd chip 1)
; --------------------------------
; 0		psd1_addr_in_0
; 1		psd1_addr_in_1
; 2		psd1_addr_in_2
; 3		psd1_acq_clk
; 4		psd1_sc0
; 5		psd1_sc1
; 6 	psd1_token_in
; 7 	psd1_sel_ext_addr

		constant MISC_OPORT, 07 

; --------------------------------
; PORT 7 (Misc outputs)
; --------------------------------
;
; 0 	force_psd_reset
; 1		veto_reset

; -------------------------------------------------------------
; A write to "VALID" port asserts FIFO tvalid signal
; A write to "LAST" port asserts FIFO tvalid and tlast signals
; The value we write to port makes NO DIFFERENCE
; -------------------------------------------------------------

			constant VALID_PORT, fe 

			constant LAST_PORT, ff 


; **********************************
; Input ports (We have 8 of them)
; **********************************

			constant STATUS_IPORT, 00 

; --------------------------------------------
; PORT 0 (Status info)
; --------------------------------------------
; 0		tready signal from AXI Stream FIFO
; 1		take_event signal from host
; 2		tdc_intb (interrupt signal from TDC7200)

			constant BOARD_ID_PORT, 01 

; --------------------------------
; PORT 1 (board id)
; --------------------------------
; 0		board_id[0]
; 1		board_id[1]
; 2		board_id[2]
; 3		board_id[3]
; 4		board_id[4]
; 5		board_id[5]

			constant PSD0_IPORT, 02 

; --------------------------------
; PORT 2 (inputs coming from psd chip 0)
; --------------------------------
; 0		psd0_or
; 1		psd0_token_out
; 2		psd0_acq_ack
; 3		psd0_addr_out0
; 4		psd0_addr_out1
; 5		psd0_addr_out2
; 6     0 (psd chip 0)

			constant PSD1_IPORT, 03 

; --------------------------------
; PORT 3 (inputs coming from psd chip 1)
; --------------------------------
; 0		psd1_or
; 1		psd1_token_out
; 2		psd1_acq_ack
; 3		psd1_addr_out0
; 4		psd1_addr_out1
; 5		psd1_addr_out2
; 6		1 (psd chip 1)

;
; Picoblaze has 16 general purpose registers
; We can use s0 - sd, se and sf are special
; Give more desciptive names to some of our registers
; The scratch registers get used but not restored!
; Other regs tend to be saved on the stack!
;
			namereg		s0, op				; Output port register (scratch)
			namereg		s1, ip        		; Input port register (scratch)
			namereg		s2, scr0       		; Scratchpad register 0 (scratch)
			namereg		s3, scr1 			; Scratchpad register 1 (scratch)
			namereg		s4, scr2 			; Scratchpad register 2 (scratch)
			namereg		s5, cnt     		; Used for counting "things"
			namereg		s6, dly_reg			; Used in delay_1us routine
			namereg		s7, adc_reg			; Used by adc routine
			namereg		s8, adc_clk_mask	; Defines which adc clocks are to be used
			namereg		s9, adc_conv_mask	; Defines which adc conv signals are to be used
			namereg		sa, psd_or_reg		; Lower 2 bits keep track of PSD1 and PSD0 ORs
			namereg		sb, led_reg			; Global variable that constains state of LEDs
			namereg		sc, tdc_ctl_reg		; Used in tdc_ser
			namereg		sd, addr_reg		; Holds PSD channel address

; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
; We’ll make sF special and use it for the stack pointer!
; Start stack at end of 64-byte scratchpad (using macro!)
; Stack grows down
; Register se is also special
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			namereg		sf, SP

; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
; We will use macros but only sparingly!
; A 16-bit register with scr1 (upper) and scr0 (lower)
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			

; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
; Scratchpad memory locations
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

; Read the board id port and store it in scratchpad memory

			constant BOARD_ID, 00 


; @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;********************************************
; Our vector which points to main routineis stored at address 000
;********************************************
; @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

      		address      000

origin:  	jump      	 nuclear

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: init
;
; Initialize the stack pointer, SP
; Initialize registers and ports
; Read board id and save
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

init:

; Initialize the stack pointer

			load SP, 3f 

; Read the board id from port and save it to scratchpad memory location 0

			input		scr0, BOARD_ID_PORT
			store		scr0, BOARD_ID

; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
; To retreive the board id from scratchpad memory
;			fetch		scr0, BOARD_ID
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

; Clear the output port registers

			load		scr0, 00
			output		scr0, LED_PORT
			output		scr0, DATA_TAG_PORT
			output		scr0, TDC_DATA_PORT
			output		scr0, TDC_CTL_PORT

; Clear some registers

			load		op, 00
			load		ip, 00
			load		cnt, 00
			load		dly_reg, 00
			load		adc_reg, 00
			load		adc_clk_mask, 00
			load		adc_conv_mask, 00
			load		tdc_ctl_reg, 00
			load		led_reg, 00
			load		psd_or_reg, 00

; Need bit 6 (tdc_csb) of TDC_CTL_PORT to be high (inactive)
; Also bit 7 (tdc_enable) should be high (active)
; Bit 5 serial clk should also be high

			or tdc_ctl_reg, 20  ; Set bit 5
			or tdc_ctl_reg, 40  ; Set bit 6
			or tdc_ctl_reg, 80  ; Set bit 7
			output		scr0, TDC_CTL_PORT

; Reset the ADC shift registers
; Bring reset bit high in adc_reg and then back low
; Bit 7 of adc_reg is the reset adc registers bit
; Clock and conv signals low
; Mux selects (3’b000) choosing adc reg for PSD0 A integrator
; Pulse the adc reg reset line

			or adc_reg, 80  ; Set bit 7
			output		adc_reg, ADC_CTL_PORT
			and adc_reg,  7f  ; Clear bit 7
			output		adc_reg, ADC_CTL_PORT

; Make sure that tokens into the PSD chips are HIGH (inactive)
; token_in for the PSD ports is bit 6

			load		scr0, 00
			or scr0, 40  ; Set bit 6
			output		scr0, PSD0_OPORT
			output		scr0, PSD1_OPORT

; Bring the force_reset and veto_reset pins low on both PSD chips
; force_reset is bit 0
; veto_reset is bit 1

			load		scr0, 00
			output		scr0, MISC_OPORT

; Done so return

			return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: tdc_ser
;
; Routine to send and receive serial dataa
; from TDC7200
;
; When called cnt should contain the number
; serial clock pulses we want
;
; --------------------------------
; PORT 4 (TDC register control)
; --------------------------------
; 0		tdc_reg_ld_0
; 1		tdc_reg_ld_1
; 2		tdc_reg_ld_2
; 3		tdc_reg_rst
; 4		tdc_reg_shift
; 5		tdc_reg_sclk
; 6		tdc_csb
; 7		tdc_enable
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tdc_ser:

; Need to bring the tdc_csb line low

			and tdc_ctl_reg,  bf  ; Clear bit 6
			output		tdc_ctl_reg, TDC_CTL_PORT

; Apply the clock pulses

.clk_loop:	and tdc_ctl_reg,  df  ; Clear bit 5
			output		tdc_ctl_reg, TDC_CTL_PORT
			load sE, sE  ; NOP
			load sE, sE  ; NOP
			or tdc_ctl_reg, 20  ; Set bit 5
			output		tdc_ctl_reg, TDC_CTL_PORT
			sub			cnt, 01
			jump		NZ, .clk_loop

; Need to bring the tdc_csb line high

			or tdc_ctl_reg, 40  ; Set bit 6
			output		tdc_ctl_reg, TDC_CTL_PORT

			return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: tdc_reg_ld
;
; Used to load a byte into the tdc_reg
;
; --------------------------------
; PORT 4 (TDC register control)
; --------------------------------
; 0		tdc_reg_ld_0
; 1		tdc_reg_ld_1
; 2		tdc_reg_ld_2
; 3		tdc_reg_rst
; 4		tdc_reg_shift
; 5		tdc_reg_sclk
; 6		tdc_csb
; 7		tdc_enable
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tdc_reg_ld:

				return


; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: force_reset
;
; This performs reset on PSD analog blocks
; Veto reset is made low
;
; Apply a 1 usec long (approx) force_reset pulse
; Bit 0 of MISC_PORT
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

force_reset:	load		op, 00
				or op, 01  ; Set bit 0
				output		op, MISC_OPORT
				call		dly_us
				and op,  fe  ; Clear bit 0
				output		op, MISC_OPORT
				return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: dly_us
;
; Delay of 1 usec
; Delay is [(4 * dly_reg) + 6] / Fclk
; constant = (clock rate - 6) / 4 where clock rate is in MHz
;
; Routine uses dly_reg and does not restore it
;
; 24 (i.e $18) assumes a 100 MHz clock
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dly_us:
			load        dly_reg, 24'd
.wait_us:	sub         dly_reg, 01
			jump		NZ, .wait_us
			return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Subroutine Name: adc_conv
;
; Pass in adc_clk_mask and adc_conv_mask
; clk_0 is bit 0 of adc_clk_mask
; clk_1 is bit 1 of adc_clk_mask
; conv_0 is bit 2 of adc_conv_mask
; conv_1 is bit 3 of adc_conv_maks
;
; Uses the cnt register to count clock pulses (16 bit ADC)
; but restores cnt register before returning!!!
; Use adc_reg but we don’t restore it
;
; ******
; Used by both the adc_test and the nuclear program
; ******
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

adc_conv:

; Save cnt register

			 store cnt, (SP)  ; Push
sub SP, 01
 

; Bring conv signals high (determined by adc_conv_mask)
; The AD7687 ADCs sample PSD analog outputs on the rising
; edge of CONV signal

			load		adc_reg, adc_conv_mask		; Make CONV high
			output		adc_reg, ADC_CTL_PORT

; Wait for 2 usec

			call		dly_us
			call		dly_us

; Bring conv signals low

			xor			adc_reg, adc_conv_mask
			output		adc_reg, ADC_CTL_PORT

; Apply 16 clock pulses (takes about 2 usec)
; Reading serial data out of the ADCs
; Clocked into shift registers in our custom block

			load		cnt, 16'd
.clk_loop:	xor			adc_reg, adc_clk_mask
			output		adc_reg, ADC_CTL_PORT
			xor			adc_reg, adc_clk_mask
			load sE, sE  ; NOP
			load sE, sE  ; NOP
			output		adc_reg, ADC_CTL_PORT
			sub			cnt, 01
			jump		NZ, .clk_loop

; Restore cnt register

			 add SP, 01  ; Pop
fetch cnt, (SP)
 

			return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Name: adc_to_fifo
;
; Each time this routine is called, it sends the A, B, C, T
; adc values to the microblaze FIFO
; ip will be used ...should contain PSDx_IPORT (x = 0 or 1)
;
; Tag format:
;
; 0		psd addr bit 0
; 1		psd addr bit 1
; 2		psd addr bit 2
; 3		psd addr bit 3 n(0 = PSD 0, 1 = PSD 1)
; 4		bit 0 of sc
; 5		bit 1 of sc
; 6		bit 0 of type
; 7		bit 1 of type

; type = 00 ---> ADC data
; type = 01 ---> Board id
; type = 10 ---> TDC data (lower 24 bits)
; type = 11 ---> TDC data (upper 24 bits)

; sc = 00 -----> integrator A
; sc = 01 -----> integrator B
; sc = 10 -----> integrator C
; sc = 11 -----> time
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

adc_to_fifo:
;
; When we enter the routine, ip should contain PSD0 or PSD1 IPORT
; addr_reg will be used ...should contain PSDx_IPORT (x = 0 or 1)
; Here is the bit map
; NOTE: bit 6 tells us if it is PSD 0 or PSD1
;
; 0		psd0_or
; 1		psd0_token_out
; 2		psd0_acq_ack
; 3		psd0_addr_out0
; 4		psd0_addr_out1
; 5		psd0_addr_out2
; 6     0 if PSD 0, 1 if PSD 1
; 7     0

; Push some registers onto stack

			 store cnt, (SP)  ; Push
sub SP, 01
 
			 store op, (SP)  ; Push
sub SP, 01
 
			 store ip, (SP)  ; Push
sub SP, 01
 

; Shift right 3 places
; Lower nybble now contains the channel address (bit 3 is PSD ID)
; Upper nybble contains 4’b000

			sr0 addr_reg
sr0 addr_reg
sr0 addr_reg


; Load cnt to keep track which output we are working on
; A, B, C, or T (00, 01, 10, 11)

			load	cnt, 00

; Use scr1 to keep track of which PSD chip (either 0 or 1)
; Inspect bit 3 of ip register to see if it is PSD 0 or PSD 1

			load	scr1, 00	; PSD 0
			test addr_reg, 08  ; Test bit 3
			jump	Z, .loop
			load	scr1, 01	; PSD 1

; We will write DATA_TAG_PORT first
; Format of the data tag byte :
; 	xxyyzzzz
; 	xx is type (00 = adc, 01 = board id, 10 = lower TDC data, 11 = upper TDC data)
; 	yy = sc (00 = A, 01 = B, 10 = C , 11 =T)
; 	zz = 4-bit channel address

.loop:		load	op, addr_reg		; Load channel address
			load	scr2, cnt			; Copy cnt (i.e. which analog output) to scr2
			sl0 scr2
sl0 scr2
sl0 scr2
sl0 scr2
				; Shift left 4 places
			or		op, scr2			; Combine with channel address
			output	op, DATA_TAG_PORT	; Put out our data tag (MSbyte of 32-bit word)

; Now we will now write ADC_CTL_PORT
; We need to route out the appropriate ADC register to the FIFO using MUX (3 bits)

			load	op, cnt				; cnt is either (00 = A, 01 = B, 10 = C, 11 = T)
			sl0 op
sl0 op
sl0 op
sl0 op
					; Mux sel is bits 4, 5, 6 of the ADC_CTL_PORT
			test scr1, 01  ; Test bit 0				; Bit 6 is 0 if PSD 0
			jump	Z, .skip
			or op, 40  ; Set bit 6				; Bit 6 is a 1 if PSD 1
.skip:		output	op, ADC_CTL_PORT
;
; Correct input is now sitting on FIFO input
; Wait for ’tready’ signal to be active
;
.wait_trdy:	input		ip, STATUS_IPORT

; Test bit 0 of STATUS_PORT (i.e. tready) ... if zero we should wait

			test ip, 01  ; Test bit 0
			jump		Z,	.wait_trdy

; When FIFO is ready, send data (what we send to vaild port makes no diff)

			output		op, VALID_PORT

; Check to see if we are done sending A, B, C, T
; When cnt is equal to 4, we are done!

			add			cnt, 01
			compare		cnt, 04
			jump		NZ, .loop

; Retrieve registers from stack

			 add SP, 01  ; Pop
fetch ip, (SP)
 
			 add SP, 01  ; Pop
fetch op, (SP)
 
			 add SP, 01  ; Pop
fetch cnt, (SP)
 

			return

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Name: get_event
;
; Routine to get a nuclear physics event
;
; Aquires data from the 4 ADCS (A, B, C, T) for all hit channels on
; both PSD chips!
;
; We look at ORs and keep getting samples until both PSD0 and PSD1 ORs low!
; Each time we get A, B, C, T samples, we send them to the FIFO
; Each time send a word to the FIFO, we need to write to VALID_PORT
;
; Before we exit we need to send one more word, what we
; send is not so important but when this word is sent
; we need to do a write to LAST_PORT! This signals the end of packet!
;
; *** Used by nuclear program
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_event:

; Set the busy bit (also led[1])
; Bit 1 of LED_PORT is led[1] which is also the busy bit!

			or led_reg, 02  ; Set bit 1
			output		led_reg, LED_PORT

; Check the ORs out of PSD chips
; If both ORs low then we are done!

.loop:		load		psd_or_reg, 00
			load		adc_reg, 00

			input		ip, PSD0_IPORT
			test ip, 01  ; Test bit 0					; Testing PSD0 OR
			jump		Z, .or0
			or psd_or_reg, 01  ; Set bit 0			; Make note that PSD0 OR is high
.or0:		input		ip, PSD1_IPORT
			test ip, 01  ; Test bit 0					; Testing PSD1 OR
			jump		Z, .or1
			or psd_or_reg, 02  ; Set bit 1			; Make note that PSD1 OR is high
;
; Implement a case statement based on lower two bits of psd_or_reg
;

.or1:		compare		psd_or_reg, 00
			jump		Z, .done
			compare		psd_or_reg, 01
			jump		Z, .psd0
			compare		psd_or_reg, 02
			jump		Z, .psd1
			compare		psd_or_reg, 03
			jump		Z, .both
;
; Should never happen ... if it does then hang
; Both LEDs will be on and PicoBlaze will be
; non-responsive
;
.err:		jump		.err

; $$$$$$$$$$$$$$$$$$$$$$$$$$$$
;  Only PSD 0 needs attention
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$

.psd0:

; Bring token_in (bit 6 of PSD0_PORT) low i.e. active!!!!
; Notablly sel_ext_addr (bit 7) must be low!
; The other bits in port ALSO need to be low
; except for acq_clk (bit 3). It needs to be high.
; PSD chips put out new analog outputs when acq_clk goes high!

			load		op, 00
			output		op, PSD0_OPORT		; ensures that the acq clk is low and token in is low before acq clk is raised.
			or op, 08  ; Set bit 3				; acq clk for PSD 0 high
			output		op, PSD0_OPORT
			call		dly_us			; Give analog outputs chance to settle
;
; Set up our masks
;
			load		adc_clk_mask,  00000001'b
			load		adc_conv_mask, 00000100'b

; Perform adc conversion

			call		adc_conv

; Read PSD address

			input		addr_reg, PSD0_IPORT

; We need to send A, B, C, T off to FIFO

			call		adc_to_fifo

; Bring acq_clk low (acq_clk is bit 3)
; Resets the hit and active registers

			and op,  f7  ; Clear bit 3			 	; Bring acq clk low
			output		op, PSD0_OPORT

; Check token out from PSD 0 (token_out is bit 1)
; If token_out is HIGH then contine else we are done

			input		ip, PSD0_IPORT
			test ip, 02  ; Test bit 1
			jump		NZ, .loop
			jump		.done

; $$$$$$$$$$$$$$$$$$$$$$$$$$$$
;  Only PSD 1 needs attention
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$

.psd1:

; Bring token_in (bit 6 of PSD0_PORT) low i.e. active!!!!
; Notablly sel_ext_addr (bit 7) must be low!
; The other bits in port ALSO need to be low
; except for acq_clk (bit 3). It needs to be high.

			load		op, 00
			or op, 08  ; Set bit 3
			output		op, PSD1_OPORT
			call		dly_us

; Set up our masks

			load		adc_clk_mask,  00000010'b
			load		adc_conv_mask, 00001000'b

; Perform adc conversion

			call		adc_conv

; Read PSD address

			input		ip, PSD1_IPORT

; We need to send A, B, C, T off to FIFO

			call		adc_to_fifo

; Bring acq_clk low (acq_clk is bit 3)
; Resets the hit and active registers

			and op,  f7  ; Clear bit 3
			output		op, PSD1_OPORT

; Check token out from PSD (token_out is bit 1)
; If token_out is HIGH then contine else we are done

			input		ip, PSD1_IPORT
			test ip, 02  ; Test bit 1
			jump		NZ, .loop
			jump		.done

; $$$$$$$$$$$$$$$$$$$$$$$$$$$$
;  Both PSD chips needs attention
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$

.both:

; Bring token_in (bit 6 of PSD0_PORT) low i.e. active!!!!
; Notablly sel_ext_addr (bit 7) must be low!
; The other bits in port ALSO need to be low
; except for acq_clk (bit 3). It needs to be high.

			load		op, 00
			or op, 08  ; Set bit 3
			output		op, PSD0_OPORT
			output		op, PSD1_OPORT
			call		dly_us				; Wait for PSD analog outputs to settle

; Set up our masks

			load		adc_clk_mask,  00000011'b
			load		adc_conv_mask, 00001100'b

; Perform adc conversion

			call		adc_conv

; Read PSD 0 address

			input		adc_reg, PSD0_IPORT

; We need to send A, B, C, T off to FIFO

			call		adc_to_fifo

; Read PSD 1 address

			input		adc_reg, PSD1_IPORT

; We need to send A, B, C, T off to FIFO

			call		adc_to_fifo

; Bring acq_clk low (acq_clk is bit 3)
; Resets the hit and active registers

			and op,  f7  ; Clear bit 3
			output		op, PSD0_OPORT
			output		op, PSD1_OPORT

; Check token out from PSD (token_out is bit 1)
; If token_out is HIGH then contine else we are done

			input		ip, PSD0_IPORT
			test ip, 02  ; Test bit 1
			jump		NZ, .loop

			input		ip, PSD1_IPORT
			test ip, 02  ; Test bit 1
			jump		NZ, .loop

; We are DONE!

.done:

; (1) Need to send one more word to FIFO
; Bit 0 of STATUS_IPORT is the tready signal
; When we send this last word we need to write to the LAST_PORT
; So we can just ignore the last word sent on microblaze side of things

			input		ip, STATUS_IPORT
			test ip, 01  ; Test bit 0
			jump		Z,	.done

; What we write to LAST_PORT makes no difference

			output		scr0, LAST_PORT

; (2)
; Bring token_in (bit 6) high for bit PSD0 and PSD1
;
			or op, 40  ; Set bit 6
			output		op, PSD0_OPORT
			output		op, PSD1_OPORT
; (3)
; Unset the busy flag (busy flag is same as LED 1)
;
			and led_reg,  fd  ; Clear bit 1
			output		led_reg, LED_PORT

			return

;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
; ******* NUCLEAR PHYSICS PROGRAM *********
;
; We sit in a tight loop waiting for take_event to go HIGH
; When posedge take_event comes along we call get_event routine.
;
; We stay in get_event untill all PSD channels are read out and
; sent back to microblaze using the streamin FIFO.
;
; We then wait for take_event to go LOW. We then go back and
; sit in tight loop waiting for next event!
;
; led[0] is lit when take_event is high
; led[1] is lit when we are actually in the get_event subroutine
; led[1] is also the busy bit i.e we are in get_event!
;
;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
nuclear:
			call		init

; Wait for take_event to go HIGH (Turn LED0 ON)
; Take event is bit 1 of the STATUS_IPORT

.wait0:		input		ip, STATUS_IPORT
			test ip, 02  ; Test bit 1
			jump		Z, 	.wait0

; First thing we need to do is bring veto_reset
; high on PSD chips before they auto_reset
; Keep force_reset low

			load		op, 00
			or op, 02  ; Set bit 1
			output		op, MISC_OPORT

; Turn led[0] on (bit 0 of LED_PORT)
; led[0] is turned on only when we are in take event

			or led_reg, 01  ; Set bit 0
			output		led_reg, LED_PORT

; Call the get_event routine
; Returns once all hit channels are read out!
; While we are in get_event the busy bit is set

; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
			call		get_event
; $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

; De-assert veto_reset
; Keep force_reset low

			load		op, 00
			output		op, MISC_OPORT

; Wait for take_event (bit 1 of STATUS_IPORT)

.wait1:		input		ip, STATUS_IPORT
			test ip, 02  ; Test bit 1
			jump		NZ, .wait1

; Force a reset (about 1 usec long)
; Shouldn’t be necessary but doesn’t hurt

			call		force_reset

; Turn led[0] off!

			and led_reg,  fe  ; Clear bit 0
			output		led_reg, LED_PORT

; Go back and wait for the next event

			jump		.wait0

; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Interrupt service routine
; Currently not using interrupts so just return
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

			address     380
my_isr:
			returni    	disable
;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Interrupt vector is stored at location $3FF
; We will jump to our ISR routine
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            address    3FF
            jump       my_isr


